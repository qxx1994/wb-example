<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/mvc
          http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd   http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--
        注解探测器
        启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean
    -->
    <context:component-scan base-package="org.webbuilder.web">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>
    <context:component-scan base-package="org.webbuilder.example.controller.api">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <bean id="loginController" class="org.webbuilder.web.controller.login.LoginController">
        <property name="counter" ref="defaultCounter"></property>
        <property name="counterKey" value="login_"></property>
    </bean>
    <!-- 默认的注解映射的支持 -->
    <mvc:annotation-driven>
        <mvc:message-converters>
            <!--使用fastJson对响应类型为json请求进行对象解析-->
            <bean class="org.webbuilder.web.core.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/x-javascript;charset=UTF-8</value>
                        <value>application/javascript;charset=UTF-8</value>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <value>WriteNullListAsEmpty</value>
                        <value>WriteNullNumberAsZero</value>
                        <value>WriteNullBooleanAsFalse</value>
                        <value>WriteDateUseDateFormat</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
        <!--json参数映射支持-->
        <mvc:argument-resolvers>
            <bean class="org.webbuilder.web.core.JsonParamMethodArgumentResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>

    <bean id="SpringContextUtil " class="org.webbuilder.web.core.utils.SpringMvcContextUtil"/>
    <!--文件上传支持-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"></property>
        <property name="maxUploadSize" value="10485760000"></property>
        <property name="maxInMemorySize" value="40960"></property>
        <property name="uploadTempDir" value="file:/upload/temp"></property>
    </bean>
    <!--
    已使用aop方式进行权限控制
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/socket"/>
            <bean class="org.webbuilder.web.core.authorize.AuthorizeInterceptor">
                <property name="loginPath" value="page/login.html"/>
                <property name="excludes">
                    <list>
                        <value>/login</value>
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>
    -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="authorizeAndLoggerAdvice" class="org.webbuilder.web.core.aop.authorize.AuthorizeAndLoggerAdvice">
        <!--
        <property name="loggerService">
            <bean class="org.webbuilder.example.service.DBLoggerService">
                <property name="baseLog">
                    <map>
                        <entry key="app_name" value="test"/>
                    </map>
                </property>
            </bean>
        </property>
        -->
        <property name="counter" ref="defaultCounter"/>
    </bean>
    <aop:config>
        <aop:pointcut id="authorize" expression="execution(* org.webbuilder.*.controller..*(..))
                                                    or execution(* org.webbuilder.web.core.controller..*(..))
                                                    "/>
        <aop:aspect ref="authorizeAndLoggerAdvice">
            <aop:around method="authorize" pointcut-ref="authorize"/>
        </aop:aspect>
    </aop:config>
    <bean id="dynamicDeployBeans" class="org.webbuilder.web.core.utils.DynamicDeployBeans"></bean>
    <!--webSocket 相关配置-->
    <!--基于命令的webSocket服务-->
    <bean id="webSocket" class="org.webbuilder.web.core.websocket.handler.CmdWebSocketHandler"/>

    <!--自定义消息缓存器的消息管理器-->
    <bean id="messageManager" class="org.webbuilder.web.core.websocket.message.imp.StorageMessageManager"
          p:driver-ref="queueDriver" p:sessionCacheDriver-ref="httpSessionDriver" p:waitFor="100">
        <!--使用redis queueDriver的存储驱动,见配置 config/cache/redis/redisCacheContext.xml -->
    </bean>
    <!--注册message命令处理,用于消息发送-->
    <!-- 如果不指定messageManager则使用默认的消息管理器: CommonMessageManager-->
    <bean class="org.webbuilder.web.core.websocket.cmd.processor.MessageProcessor" p:messageManager-ref="messageManager"
          init-method="init"/>
    <!--service调用器，用于调用注册到spring的并且实现了SocketService接口的service-->
    <bean class="org.webbuilder.web.core.websocket.cmd.processor.ServiceProcessor" init-method="init"/>
    <bean class="org.webbuilder.web.core.websocket.cmd.processor.LoggerProcessor" p:messageManager-ref="messageManager"
          init-method="init"/>

    <!--webSocket 映射设置
    <websocket:handlers>
        <websocket:mapping path="/socket" handler="webSocket"/>
        <websocket:handshake-interceptors>
            <bean class="org.webbuilder.web.core.websocket.HandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>
-->
</beans>